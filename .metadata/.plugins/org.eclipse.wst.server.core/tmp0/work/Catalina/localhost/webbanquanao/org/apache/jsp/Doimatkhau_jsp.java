/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.0-M22
 * Generated at: 2024-12-14 16:31:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class Doimatkhau_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"vi\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Đổi Mật Khẩu</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        /* Thiết lập chung */\r\n");
      out.write("        * {\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            padding: 0;\r\n");
      out.write("            box-sizing: border-box;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        body {\r\n");
      out.write("            font-family: 'Arial', sans-serif;\r\n");
      out.write("            background-color: #f1f1f1; /* Nền nhẹ nhàng */\r\n");
      out.write("            color: #333;\r\n");
      out.write("            line-height: 1.6;\r\n");
      out.write("            padding: 0;\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            justify-content: center;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            min-height: 100vh;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* Container chính */\r\n");
      out.write("        .container {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            max-width: 500px;\r\n");
      out.write("            background-color: #fff;\r\n");
      out.write("            padding: 20px;\r\n");
      out.write("            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\r\n");
      out.write("            border-radius: 10px;\r\n");
      out.write("            margin: 20px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* Tiêu đề */\r\n");
      out.write("        header {\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            margin-bottom: 20px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        header h1 {\r\n");
      out.write("            font-size: 2rem;\r\n");
      out.write("            color: #333;\r\n");
      out.write("            font-weight: 600;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* Form chỉnh sửa mật khẩu */\r\n");
      out.write("        .form-container {\r\n");
      out.write("            padding: 20px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .form-container h2 {\r\n");
      out.write("            font-size: 1.5rem;\r\n");
      out.write("            margin-bottom: 20px;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            color: #444;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .form-group {\r\n");
      out.write("            margin-bottom: 20px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .form-group label {\r\n");
      out.write("            font-size: 1rem;\r\n");
      out.write("            color: #555;\r\n");
      out.write("            display: block;\r\n");
      out.write("            margin-bottom: 8px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .form-group input {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            padding: 12px;\r\n");
      out.write("            font-size: 1rem;\r\n");
      out.write("            border: 1px solid #ddd;\r\n");
      out.write("            border-radius: 8px;\r\n");
      out.write("            outline: none;\r\n");
      out.write("            transition: border 0.3s;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .form-group input:focus {\r\n");
      out.write("            border-color: #56cfe1; /* Màu xanh nhạt khi focus */\r\n");
      out.write("            box-shadow: 0 0 5px rgba(86, 207, 225, 0.3);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* Messages lỗi */\r\n");
      out.write("        .error-message {\r\n");
      out.write("            color: #d9534f;\r\n");
      out.write("            font-size: 0.9rem;\r\n");
      out.write("            margin-top: 5px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* Buttons */\r\n");
      out.write("        .btn {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            padding: 14px;\r\n");
      out.write("            background-color: #56cfe1; /* Màu xanh nhẹ */\r\n");
      out.write("            border: none;\r\n");
      out.write("            border-radius: 8px;\r\n");
      out.write("            color: #fff;\r\n");
      out.write("            font-size: 1rem;\r\n");
      out.write("            font-weight: bold;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            transition: background-color 0.3s ease;\r\n");
      out.write("            margin-bottom: 10px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .btn:hover {\r\n");
      out.write("            background-color: #009c99; /* Màu xanh đậm khi hover */\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .cancel-btn {\r\n");
      out.write("            background-color: #f1f1f1;\r\n");
      out.write("            color: #333;\r\n");
      out.write("            border: 1px solid #ddd;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .cancel-btn:hover {\r\n");
      out.write("            background-color: #ddd;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* Responsive Design */\r\n");
      out.write("        @media (max-width: 768px) {\r\n");
      out.write("            .container {\r\n");
      out.write("                width: 90%;\r\n");
      out.write("                padding: 15px;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            header h1 {\r\n");
      out.write("                font-size: 1.8rem;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            .form-container h2 {\r\n");
      out.write("                font-size: 1.3rem;\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <header>\r\n");
      out.write("            <h1>Đổi Mật Khẩu</h1>\r\n");
      out.write("        </header>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"form-container\">\r\n");
      out.write("            <h2>Chỉnh sửa mật khẩu của bạn</h2>\r\n");
      out.write("            <form id=\"change-password-form\" action=\"UpdateUser\" method=\"POST\" onsubmit=\"return validateForm()\">\r\n");
      out.write("                <!-- Email -->\r\n");
      out.write("                <div class=\"form-group\">\r\n");
      out.write("                    <label for=\"email\">Email</label>\r\n");
      out.write("                    <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Nhập email của bạn\" required>\r\n");
      out.write("                    <div id=\"email-error\" class=\"error-message\"></div>\r\n");
      out.write("                </div>\r\n");
      out.write("                <!-- Mật khẩu cũ -->\r\n");
      out.write("                <div class=\"form-group\">\r\n");
      out.write("                    <label for=\"old-password\">Mật khẩu cũ</label>\r\n");
      out.write("                    <input type=\"password\" id=\"old-password\" name=\"old-password\" placeholder=\"Nhập mật khẩu cũ\" required>\r\n");
      out.write("                    <div id=\"old-password-error\" class=\"error-message\"></div>\r\n");
      out.write("                </div>\r\n");
      out.write("                <!-- Mật khẩu mới -->\r\n");
      out.write("                <div class=\"form-group\">\r\n");
      out.write("                    <label for=\"new-password\">Mật khẩu mới</label>\r\n");
      out.write("                    <input type=\"password\" id=\"new-password\" name=\"new-password\" placeholder=\"Nhập mật khẩu mới\" required>\r\n");
      out.write("                    <div id=\"new-password-error\" class=\"error-message\"></div>\r\n");
      out.write("                </div>\r\n");
      out.write("                <!-- Xác nhận mật khẩu mới -->\r\n");
      out.write("                <div class=\"form-group\">\r\n");
      out.write("                    <label for=\"confirm-password\">Xác nhận mật khẩu mới</label>\r\n");
      out.write("                    <input type=\"password\" id=\"confirm-password\" name=\"confirm-password\" placeholder=\"Xác nhận mật khẩu mới\" required>\r\n");
      out.write("                    <div id=\"confirm-password-error\" class=\"error-message\"></div>\r\n");
      out.write("                </div>\r\n");
      out.write("                <!-- Các nút -->\r\n");
      out.write("                <button type=\"submit\" class=\"btn\">Lưu thay đổi</button>\r\n");
      out.write("                <button type=\"button\" class=\"btn cancel-btn\" onclick=\"goBack()\">Hủy</button>\r\n");
      out.write("            </form>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        function goBack() {\r\n");
      out.write("            window.history.back(); // Quay lại trang trước\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function validateForm() {\r\n");
      out.write("            // Xóa các thông báo lỗi trước đó\r\n");
      out.write("            clearErrors();\r\n");
      out.write("\r\n");
      out.write("            let valid = true;\r\n");
      out.write("            const email = document.getElementById(\"email\").value;\r\n");
      out.write("            const oldPassword = document.getElementById(\"old-password\").value;\r\n");
      out.write("            const newPassword = document.getElementById(\"new-password\").value;\r\n");
      out.write("            const confirmPassword = document.getElementById(\"confirm-password\").value;\r\n");
      out.write("\r\n");
      out.write("            // Kiểm tra email\r\n");
      out.write("            const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\r\n");
      out.write("            if (!emailPattern.test(email)) {\r\n");
      out.write("                document.getElementById(\"email-error\").textContent = \"Email không hợp lệ.\";\r\n");
      out.write("                valid = false;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            // Kiểm tra mật khẩu cũ (đơn giản cho ví dụ, bạn cần thêm logic để kiểm tra mật khẩu cũ)\r\n");
      out.write("            if (oldPassword.length < 6) {\r\n");
      out.write("                document.getElementById(\"old-password-error\").textContent = \"Mật khẩu cũ phải có ít nhất 6 ký tự.\";\r\n");
      out.write("                valid = false;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            // Kiểm tra mật khẩu mới và mật khẩu cũ\r\n");
      out.write("            if (newPassword === oldPassword) {\r\n");
      out.write("                document.getElementById(\"new-password-error\").textContent = \"Mật khẩu mới không được trùng với mật khẩu cũ.\";\r\n");
      out.write("                valid = false;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            // Kiểm tra xác nhận mật khẩu mới\r\n");
      out.write("            if (newPassword !== confirmPassword) {\r\n");
      out.write("                document.getElementById(\"confirm-password-error\").textContent = \"Mật khẩu mới và xác nhận mật khẩu không khớp.\";\r\n");
      out.write("                valid = false;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            return valid; // Nếu valid = true, form sẽ được submit, nếu không sẽ dừng lại\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function clearErrors() {\r\n");
      out.write("            document.getElementById(\"email-error\").textContent = \"\";\r\n");
      out.write("            document.getElementById(\"old-password-error\").textContent = \"\";\r\n");
      out.write("            document.getElementById(\"new-password-error\").textContent = \"\";\r\n");
      out.write("            document.getElementById(\"confirm-password-error\").textContent = \"\";\r\n");
      out.write("        }\r\n");
      out.write("    </script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("    ");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
